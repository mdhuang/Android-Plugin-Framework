apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    aaptOptions {
        //将宿主资源添加到编译时，仅参与编译，不参与打包
        additionalParameters '-I', project(':PluginMain').getBuildDir().absolutePath + "/outputs/resources-debug.ap_"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.example.plugintest"
        minSdkVersion 11
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.1"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            jniLibs.srcDirs = ['libs']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes {
        release {
            versionNameSuffix '_' + getDate()
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            versionNameSuffix '_' + getDate()
        }
    }

}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    //依赖库的src
    provided files(project(':PluginCore').getBuildDir().absolutePath + '/outputs/PluginCore.jar')
    provided files(project(':PluginBase').getBuildDir().absolutePath + '/outputs/PluginBase.jar')

    //依赖库的R
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/outputs/rClasses.jar')
    //依赖库的src
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/bundles/debug/classes.jar')
    //依赖库的依赖裤（当supportV4在依赖库V的libs目录下时）
    //provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/bundles/debug/libs/android-support-v4.jar')
    //依赖库的依赖裤（当supportV4通过仓库依赖时）
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/exploded-aar/com.android.support/support-v4/22.1.1/jars/classes.jar')
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/exploded-aar/com.android.support/support-v4/22.1.1/jars/libs/internal_impl-22.1.1.jar')
    provided files(project(':PluginShareLib').getBuildDir().absolutePath + '/intermediates/exploded-aar/com.android.support/appcompat-v7/22.1.1/jars/classes.jar')

    //如果插件需要依赖一些私有库，可放开下面的注释，并修改为私有库的名称
    //compile project(':PluginPrivateLib1')
    //compile project(':PluginPrivateLib2')
    //compile file('xxx/xxx.jar');
}

build.doLast {
    //将编译好的插件apk复制到Main工程的assets目录下, 便于测试
    copy {
        println 'copy plugin apk to assets... ' + buildDir.absolutePath + '/outputs/apk/PluginTest-debug.apk'
        from(buildDir.absolutePath + '/outputs/apk/') {
            include 'PluginTest-debug.apk'
        }
        into(project(':PluginMain').getProjectDir().absolutePath + '/assets/')
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith("merge") && task.name.endsWith("Resources")) {

        task.doLast {
            copy {
                from(project.getProjectDir()) {
                    include 'public*.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values/")
            }

            //太蠢了 这里最好改成循环遍历
            //将宿主工程导出的主题也复制过来
            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'public*.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values-v11.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values-v11/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values-v12.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values-v12/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values-v13.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values-v13/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values-v14.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values-v14/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values-v17.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values-v17/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values-v18.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values-v18/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values-v21.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values-v21/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values-v22.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values-v22/")
            }

            copy {
                from(project(':PluginMain').getBuildDir().absolutePath + "/outputs/theme_patch") {
                    include 'patch_values-v23.xml'
                }
                into("${project.buildDir}/intermediates/res/merged/" + task.name.replace("merge", "").replace("Resources", "").toLowerCase() + "/values-v23/")
            }
        }
        //task.enabled = false
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy_MM_dd_HH_mm_ss')
    return formattedDate
}
