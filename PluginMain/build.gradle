import org.xml.sax.Attributes
import org.xml.sax.SAXException
import org.xml.sax.helpers.DefaultHandler

import javax.xml.parsers.ParserConfigurationException
import javax.xml.parsers.SAXParser
import javax.xml.parsers.SAXParserFactory
import java.io.*;
import java.util.HashSet;
import java.util.Stack;

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    aaptOptions {
        additionalParameters "-P", project.buildDir.absolutePath + "/outputs/generated_exported_all_resouces.xml"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.example.pluginmain"
        minSdkVersion 8
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            jniLibs.srcDirs = ['libs']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    signingConfigs {
        debug {
            storeFile file("limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }

        release {
            storeFile file("limpoxe.keystore")
            storePassword "123456"
            keyAlias "limpoxe"
            keyPassword "123456"
        }
    }
}

dependencies {
    //compile 'com.android.support:appcompat-v7:23.0.0'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':PluginCore')
    compile project(':PluginShareLib')
}


tasks.whenTaskAdded { task ->
    if (task.name.startsWith("merge") && task.name.endsWith("Resources") && !task.name.contains("AndroidTest")) {

        task.doLast {
            copy {
                from(project.getProjectDir()) {
                    include 'public.xml'
                }
                String dirName = task.name.replace("merge", "").replace("Resources", "");
                //这里最好再增加一个buildType判断，而不是写死Debug和Release两种
                if (dirName.equals("Debug") || dirName.equals("Release")) {
                    into("${project.buildDir}/intermediates/res/merged/" + dirName.toLowerCase() + "/values/")
                } else if (dirName.endsWith("Debug")) {
                    into("${project.buildDir}/intermediates/res/merged/" + dirName.replace("Debug", "") + "/debug/values/")
                } else if (dirName.endsWith("Release")) {
                    into("${project.buildDir}/intermediates/res/merged/" + dirName.replace("Release", "") + "/release/values/")
                }
            }
        }
        //task.enabled = false
    }

    if (task.name.startsWith("process") && task.name.endsWith("Resources") && !task.name.contains("AndroidTest")) {

        task.doLast {
            copy {
                String name = task.name.replace("process", "").replace("Resources", "");
                //这里最好再增加一个buildType判断，而不是写死Debug和Release两种
                if (name.equals("Debug") || name.equals("Release")) {
                    name = "resources-" + name.toLowerCase() + ".ap_";
                } else if (name.endsWith("Debug")) {
                    name = "resources-" + name.replace("Debug", "") + "-debug.ap_";
                } else if (name.endsWith("Release")) {
                    name = "resources-" + name.replace("Release", "") + "-release.ap_";
                }

                from("${project.buildDir}/intermediates/res/") {
                    include name
                }
                if (task.name.endsWith("DebugResources")) {
                    into("${project.buildDir}/outputs/")
                    rename { String fileName ->
                        'resources-debug.ap_'
                    }
                } else if (task.name.endsWith("ReleaseResources")) {
                    into("${project.buildDir}/outputs/")
                    rename { String fileName ->
                        'resources-release.ap_'
                    }
                }
            }
        }

        //task.enabled = false
    }
}

build.doLast {

    //导出主题patch
    createThemePatch();
}

//导出主题patch
def createThemePatch() {
    File patchDir = new File(project.buildDir.absolutePath + "/outputs/theme_patch");
    patchDir.mkdirs();

    String parenDir = "${project.buildDir}/intermediates/res/merged/debug/";
    XmlHandler.exportThemeStyle(new File(parenDir + "values/values.xml"),
            new File(patchDir, "patch_values.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(parenDir + "values-v11/values-v11.xml"),
            new File(patchDir, "patch_values-v11.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(parenDir + "values-v12/values-v12.xml"),
            new File(patchDir, "patch_values-v12.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(parenDir + "values-v13/values-v13.xml"),
            new File(patchDir, "patch_values-v13.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(parenDir + "values-v14/values-v14.xml"),
            new File(patchDir, "patch_values-v14.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(parenDir + "values-v17/values-v17.xml"),
            new File(patchDir, "patch_values-v17.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(parenDir + "values-v18/values-18.xml"),
            new File(patchDir, "patch_values-v18.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(parenDir + "values-v21/values-v21.xml"),
            new File(patchDir, "patch_values-v21.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(parenDir + "values-v22/values-v22.xml"),
            new File(patchDir, "patch_values-v22.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(parenDir + "values-v23/values-v23.xml"),
            new File(patchDir, "patch_values-v23.xml"), android.defaultConfig.applicationId)

    XmlHandler.exportThemeStyle(new File(project.buildDir.absolutePath + "/outputs/generated_exported_all_resouces.xml"),
            new File(patchDir, "public_theme.xml"), android.defaultConfig.applicationId)
}

//http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/
//自定义混淆配置
//def androidSDKDir = plugins.getPlugin('com.android.library').sdkHandler.getSdkFolder()
//def androidJarDir = androidSDKDir.toString() + '/platforms/' + "${android.compileSdkVersion}" + '/android.jar'

//task proguardMyLib(type: proguard.gradle.ProGuardTask, dependsOn: ['jarMyLib']) {
//    injars('build/libs/my-lib.jar')
//    outjars('build/libs/my-pro-lib.jar')
//    libraryjars(androidJarDir)
//    configuration 'proguard-rules.pro'
//}

///////////////////////
///////////////////////
///////////////////////
///////////////////////
public class XmlHandler extends DefaultHandler {

    public static void exportThemeStyle(File srcFile, File destFile, String packageName) {
        try {
            SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser();
            saxParser.parse(new FileInputStream(srcFile), new XmlHandler(destFile, packageName));
        } catch (ParserConfigurationException e) {
            System.out.println(e.getMessage());
        } catch (SAXException e) {
            System.out.println(e.getMessage());
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

    }

    ////////////////
    ////////////////
    ////////////////

    File destFile;
    String packageName;
    Stack<Node> stack = new Stack<Node>();
    BufferedWriter outXmlStream = null;

    HashSet<String> attrSets = new HashSet<>();

    public XmlHandler(File destFile, String packageName) {
        this.destFile = destFile;
        this.packageName = packageName;
    }

    public void startDocument() throws SAXException {
        try {
            outXmlStream = new BufferedWriter(new FileWriter(destFile));
            outXmlStream.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            outXmlStream.write("\n<!-- AUTO-GENERATED FILE.  DO NOT MODIFY -->");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {

        if (qName.equals("bool") || qName.equals("color") || qName.equals("dimen") || qName.equals("eat-comment")
                || qName.equals("integer") || qName.equals("string")) {
            stack.add(new Node(attributes.getValue("name"), false, true));
            return;
        }

        boolean skip = false;
        if (!qName.equals("declare-styleable")) {
            String space = "\n";
            for (int i = 0; i < stack.size(); i++) {
                space = space + "    ";
            }
            String tag = space + "<" + qName;
            for (int i = 0; i < attributes.getLength(); i++) {
                tag = tag + " " + attributes.getQName(i) + "=\""+ attributes.getValue(i) + "\"";
            }
            tag = tag + ">";
            try {
                if (qName.equals("attr") && (attributes.getValue("name").startsWith("android:") || !attrSets.add(attributes.getValue("name")))
                     || (qName.equals("public") && (!attributes.getValue("type").equals("attr") || attributes.getValue("name").startsWith("public_static_final_")))) {
                    //skip
                    skip = true;
                } else {
                    outXmlStream.write(tag);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        if (!stack.empty()) {
            Node top = stack.peek();
            top.hasChild = true;
        }
        stack.add(new Node(attributes.getValue("name"), false, skip));
    }

    public void endElement(String uri, String localName, String qName) throws SAXException {

        Node node = stack.pop();
        if (node.skip) {
            return;
        }

        if (!qName.equals("declare-styleable")) {
            String space = "";
            if (node.hasChild) {
                space = "\n";
                for (int i = 0; i < stack.size(); i++) {
                    space = space + "    ";
                }
            }
            try {
                outXmlStream.write(space + "</" + qName +">");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    public void characters(char[] ch, int start, int length) throws SAXException {
        Node node = stack.peek();
        if (node.skip) {
            return;
        }

        String text = new String(ch, start, length);
        text = text.replaceAll("[\n ]", "");
        if (text.length() > 0) {
            try {
                if (text.startsWith("@color")) {
                    text = text.replace("@color", "@*" + packageName +":color");

                } else if (text.startsWith("@dimen")) {
                    text = text.replace("@dimen", "@*" + packageName +":dimen");

                } else if (text.startsWith("@string")) {
                    text = text.replace("@string", "@*" + packageName +":string");

                } else if (text.startsWith("@bool")) {
                    text = text.replace("@bool", "@*" + packageName +":bool");

                } else if (text.startsWith("@integer")) {
                    text = text.replace("@integer", "@*" + packageName +":integer");

                } else if (text.startsWith("@layout")) {
                    text = text.replace("@layout", "@*" + packageName +":layout");

                } else if (text.startsWith("@anim")) {
                    text = text.replace("@anim", "@*" + packageName +":anim");

                } else if (text.startsWith("@id")) {
                    text = text.replace("@id", "@*" + packageName +":id");

                } else if (text.startsWith("@drawable")) {
                    text = text.replace("@drawable", "@*" + packageName +":drawable");

                    //} else if (text.startsWith("?attr")) {
                    //    text = text.replace("?attr", "?*" + packageName +":attr");
                }

                outXmlStream.write(text);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void endDocument() throws SAXException {
        try {
            outXmlStream.flush();
            outXmlStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static class Node {
        String name = null;
        boolean hasChild = false;
        boolean skip = false;

        public Node(String name, boolean hasChild, boolean skip) {
            this.name = name;
            this.hasChild = hasChild;
            this.skip = skip;
        }
    }

}